{
  "{\"sourceRoot\":\"/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020\",\"filename\":\"/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/gulpfile.babel.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020",
      "filename": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/gulpfile.babel.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "/**\n * Gulpfile.\n *\n * Gulp with WordPress.\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies Vendor and Custom JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n * @tutorial https://github.com/ahmadawais/WPGulp\n * @author Ahmad Awais <https://twitter.com/MrAhmadAwais/>\n */\n\n/**\n * Load WPGulp Configuration.\n *\n * TODO: Customize your project in the wpgulp.js file.\n */\nconst config = require('./wpgulp.config.js');\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\n\n\nconst gulp = require('gulp'); // Gulp of-course.\n\n\nconst strip = require('gulp-strip-comments'); // CSS related plugins.\n\n\nconst sass = require('gulp-sass'); // Gulp plugin for Sass compilation.\n\n\nconst minifycss = require('gulp-uglifycss'); // Minifies CSS files.\n\n\nconst autoprefixer = require('gulp-autoprefixer'); // Autoprefixing magic.\n\n\nconst mmq = require('gulp-merge-media-queries'); // Combine matching media queries into one.\n\n\nconst rtlcss = require('gulp-rtlcss'); // Generates RTL stylesheet.\n// JS related plugins.\n\n\nconst concat = require('gulp-concat'); // Concatenates JS files.\n\n\nconst uglify = require('gulp-uglify'); // Minifies JS files.\n\n\nconst babel = require('gulp-babel'); // Compiles ESNext to browser compatible JS.\n// Image related plugins.\n\n\nconst imagemin = require('gulp-imagemin'); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n// Utility related plugins.\n\n\nconst rename = require('gulp-rename'); // Renames files E.g. style.css -> style.min.css.\n\n\nconst lineec = require('gulp-line-ending-corrector'); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\n\n\nconst filter = require('gulp-filter'); // Enables you to work on a subset of the original files by filtering them using a glob.\n\n\nconst sourcemaps = require('gulp-sourcemaps'); // Maps code in a compressed file (E.g. style.css) back to it’s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\n\n\nconst notify = require('gulp-notify'); // Sends message notification to you.\n\n\nconst browserSync = require('browser-sync').create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\n\n\nconst wpPot = require('gulp-wp-pot'); // For generating the .pot file.\n\n\nconst sort = require('gulp-sort'); // Recommended to prevent unnecessary changes in pot-file.\n\n\nconst cache = require('gulp-cache'); // Cache files in stream for later use.\n\n\nconst remember = require('gulp-remember'); //  Adds all the files it has ever seen back into the stream.\n\n\nconst plumber = require('gulp-plumber'); // Prevent pipe breaking caused by errors from gulp plugins.\n\n\nconst beep = require('beepbeep');\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\n\n\nconst errorHandler = r => {\n  notify.onError('\\n\\n❌  ===> ERROR: <%= error.message %>\\n')(r);\n  beep(); // this.emit('end');\n};\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\n\n\nconst browsersync = done => {\n  browserSync.init({\n    proxy: config.projectURL,\n    open: config.browserAutoOpen,\n    injectChanges: config.injectChanges,\n    watchEvents: ['change', 'add', 'unlink', 'addDir', 'unlinkDir']\n  });\n  done();\n}; // Helper function to allow browser reload with Gulp 4.\n\n\nconst reload = done => {\n  browserSync.reload();\n  done();\n};\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\n\n\ngulp.task('styles', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(autoprefixer(config.BROWSERS_LIST)).pipe(sourcemaps.write('./')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(mmq({\n    log: true\n  })) // Merge Media Queries only for .min.css version.\n  .pipe(browserSync.stream()) // Reloads style.css if that is enqueued.\n  .pipe(rename({\n    suffix: '.min'\n  })).pipe(minifycss({\n    maxLineLen: 10\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.min.css if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n✅  ===> STYLES — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\n\ngulp.task('stylesRTL', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(strip()).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(autoprefixer(config.BROWSERS_LIST)).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(rename({\n    suffix: '-rtl'\n  })) // Append \"-rtl\" to the filename.\n  .pipe(rtlcss()) // Convert to RTL.\n  .pipe(sourcemaps.write('./')) // Output sourcemap for style-rtl.css.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(mmq({\n    log: true\n  })) // Merge Media Queries only for .min.css version.\n  .pipe(rename({\n    suffix: '.min'\n  })).pipe(minifycss({\n    maxLineLen: 10\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n✅  ===> STYLES RTL — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `vendorsJS`.\n *\n * Concatenate and uglify vendor JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS vendor files\n *     2. Concatenates all the files and generates vendors.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates vendors.min.js\n */\n\ngulp.task('vendorsJS', () => {\n  return gulp.src(config.jsVendorSRC, {\n    since: gulp.lastRun('vendorsJS')\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(strip()).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST\n      } // Target browser list to support.\n\n    }]]\n  })).pipe(remember(config.jsVendorSRC)) // Bring all files back to stream.\n  .pipe(concat(config.jsVendorFile + '.js')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsVendorDestination)).pipe(rename({\n    basename: config.jsVendorFile,\n    suffix: '.min'\n  })).pipe(uglify()).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsVendorDestination)).pipe(browserSync.stream()).pipe(notify({\n    message: '\\n\\n✅  ===> VENDOR JS — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\n\ngulp.task('customJS', () => {\n  return gulp.src(config.jsCustomSRC, {\n    since: gulp.lastRun('customJS')\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(strip()).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST\n      } // Target browser list to support.\n\n    }]]\n  })).pipe(remember(config.jsCustomSRC)) // Bring all files back to stream.\n  .pipe(concat(config.jsCustomFile + '.js')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(rename({\n    basename: config.jsCustomFile,\n    suffix: '.min'\n  })).pipe(uglify()).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(browserSync.stream()).pipe(notify({\n    message: '\\n\\n✅  ===> CUSTOM JS — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\n\ngulp.task('images', () => {\n  return gulp.src(config.imgSRC).pipe(cache(imagemin([imagemin.gifsicle({\n    interlaced: true\n  }), imagemin.jpegtran({\n    progressive: true\n  }), imagemin.optipng({\n    optimizationLevel: 3\n  }), // 0-7 low-high.\n  imagemin.svgo({\n    plugins: [{\n      removeViewBox: true\n    }, {\n      cleanupIDs: false\n    }]\n  })]))).pipe(gulp.dest(config.imgDST)).pipe(notify({\n    message: '\\n\\n✅  ===> IMAGES — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\n\ngulp.task('clearCache', function (done) {\n  return cache.clearAll(done);\n});\n/**\n * WP POT Translation File Generator.\n *\n * This task does the following:\n * 1. Gets the source of all the PHP files\n * 2. Sort files in stream by path or any custom sort comparator\n * 3. Applies wpPot with the variable set at the top of this file\n * 4. Generate a .pot file of i18n that can be used for l10n to build .mo file\n */\n\ngulp.task('translate', () => {\n  return gulp.src(config.watchPhp).pipe(sort()).pipe(wpPot({\n    domain: config.textDomain,\n    package: config.packageName,\n    bugReport: config.bugReport,\n    lastTranslator: config.lastTranslator,\n    team: config.team\n  })).pipe(gulp.dest(config.translationDestination + '/' + config.translationFile)).pipe(notify({\n    message: '\\n\\n✅  ===> TRANSLATE — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\n\ngulp.task('default', gulp.parallel('styles', 'vendorsJS', 'customJS', 'images', browsersync, () => {\n  gulp.watch(config.watchPhp, reload); // Reload on PHP file changes.\n\n  gulp.watch(config.watchStyles, gulp.parallel('styles')); // Reload on SCSS file changes.\n\n  gulp.watch(config.watchJsVendor, gulp.series('vendorsJS', reload)); // Reload on vendorsJS file changes.\n\n  gulp.watch(config.watchJsCustom, gulp.series('customJS', reload)); // Reload on customJS file changes.\n\n  gulp.watch(config.imgSRC, gulp.series('images', reload)); // Reload on customJS file changes.\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "config",
        "require",
        "gulp",
        "strip",
        "sass",
        "minifycss",
        "autoprefixer",
        "mmq",
        "rtlcss",
        "concat",
        "uglify",
        "babel",
        "imagemin",
        "rename",
        "lineec",
        "filter",
        "sourcemaps",
        "notify",
        "browserSync",
        "create",
        "wpPot",
        "sort",
        "cache",
        "remember",
        "plumber",
        "beep",
        "errorHandler",
        "r",
        "onError",
        "browsersync",
        "done",
        "init",
        "proxy",
        "projectURL",
        "open",
        "browserAutoOpen",
        "injectChanges",
        "watchEvents",
        "reload",
        "task",
        "src",
        "styleSRC",
        "allowEmpty",
        "pipe",
        "errLogToConsole",
        "outputStyle",
        "precision",
        "on",
        "logError",
        "write",
        "includeContent",
        "loadMaps",
        "BROWSERS_LIST",
        "dest",
        "styleDestination",
        "log",
        "stream",
        "suffix",
        "maxLineLen",
        "message",
        "onLast",
        "jsVendorSRC",
        "since",
        "lastRun",
        "presets",
        "targets",
        "browsers",
        "jsVendorFile",
        "jsVendorDestination",
        "basename",
        "jsCustomSRC",
        "jsCustomFile",
        "jsCustomDestination",
        "imgSRC",
        "gifsicle",
        "interlaced",
        "jpegtran",
        "progressive",
        "optipng",
        "optimizationLevel",
        "svgo",
        "plugins",
        "removeViewBox",
        "cleanupIDs",
        "imgDST",
        "clearAll",
        "watchPhp",
        "domain",
        "textDomain",
        "package",
        "packageName",
        "bugReport",
        "lastTranslator",
        "team",
        "translationDestination",
        "translationFile",
        "parallel",
        "watch",
        "watchStyles",
        "watchJsVendor",
        "series",
        "watchJsCustom"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/",
      "sourcesContent": [
        "/**\n * Gulpfile.\n *\n * Gulp with WordPress.\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies Vendor and Custom JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n * @tutorial https://github.com/ahmadawais/WPGulp\n * @author Ahmad Awais <https://twitter.com/MrAhmadAwais/>\n */\n\n/**\n * Load WPGulp Configuration.\n *\n * TODO: Customize your project in the wpgulp.js file.\n */\nconst config = require( './wpgulp.config.js' );\n\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\nconst gulp = require( 'gulp' ); // Gulp of-course.\n\n\nconst strip = require('gulp-strip-comments');\n// CSS related plugins.\nconst sass = require( 'gulp-sass' ); // Gulp plugin for Sass compilation.\nconst minifycss = require( 'gulp-uglifycss' ); // Minifies CSS files.\nconst autoprefixer = require( 'gulp-autoprefixer' ); // Autoprefixing magic.\nconst mmq = require( 'gulp-merge-media-queries' ); // Combine matching media queries into one.\nconst rtlcss = require( 'gulp-rtlcss' ); // Generates RTL stylesheet.\n\n// JS related plugins.\nconst concat = require( 'gulp-concat' ); // Concatenates JS files.\nconst uglify = require( 'gulp-uglify' ); // Minifies JS files.\nconst babel = require( 'gulp-babel' ); // Compiles ESNext to browser compatible JS.\n\n// Image related plugins.\nconst imagemin = require( 'gulp-imagemin' ); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n\n// Utility related plugins.\nconst rename = require( 'gulp-rename' ); // Renames files E.g. style.css -> style.min.css.\nconst lineec = require( 'gulp-line-ending-corrector' ); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\nconst filter = require( 'gulp-filter' ); // Enables you to work on a subset of the original files by filtering them using a glob.\nconst sourcemaps = require( 'gulp-sourcemaps' ); // Maps code in a compressed file (E.g. style.css) back to it’s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\nconst notify = require( 'gulp-notify' ); // Sends message notification to you.\nconst browserSync = require( 'browser-sync' ).create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\nconst wpPot = require( 'gulp-wp-pot' ); // For generating the .pot file.\nconst sort = require( 'gulp-sort' ); // Recommended to prevent unnecessary changes in pot-file.\nconst cache = require( 'gulp-cache' ); // Cache files in stream for later use.\nconst remember = require( 'gulp-remember' ); //  Adds all the files it has ever seen back into the stream.\nconst plumber = require( 'gulp-plumber' ); // Prevent pipe breaking caused by errors from gulp plugins.\nconst beep = require( 'beepbeep' );\n\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\nconst errorHandler = r => {\n\tnotify.onError( '\\n\\n❌  ===> ERROR: <%= error.message %>\\n' )( r );\n\tbeep();\n\n\t// this.emit('end');\n};\n\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\nconst browsersync = done => {\n\tbrowserSync.init({\n\t\tproxy: config.projectURL,\n\t\topen: config.browserAutoOpen,\n\t\tinjectChanges: config.injectChanges,\n\t\twatchEvents: [ 'change', 'add', 'unlink', 'addDir', 'unlinkDir' ]\n\t});\n\tdone();\n};\n\n// Helper function to allow browser reload with Gulp 4.\nconst reload = done => {\n\tbrowserSync.reload();\n\tdone();\n};\n\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'styles', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, { allowEmpty: true })\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass({\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t})\n\t\t)\n\t\t.on( 'error', sass.logError )\n\n\t\t.pipe( sourcemaps.write({ includeContent: false }) )\n\n\t\t.pipe( sourcemaps.init({ loadMaps: true }) )\n\t\t.pipe( autoprefixer( config.BROWSERS_LIST ) )\n\t\t.pipe( sourcemaps.write( './' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( mmq({ log: true }) ) // Merge Media Queries only for .min.css version.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css if that is enqueued.\n\t\t.pipe( rename({ suffix: '.min' }) )\n\t\t.pipe( minifycss({ maxLineLen: 10 }) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.min.css if that is enqueued.\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> STYLES — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'stylesRTL', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, { allowEmpty: true })\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\n\t\t.pipe(\n\t\t\tsass({\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t})\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe(strip())\n\t\t.pipe( sourcemaps.write({ includeContent: false }) )\n\t\t.pipe( sourcemaps.init({ loadMaps: true }) )\n\t\t.pipe( autoprefixer( config.BROWSERS_LIST ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( rename({ suffix: '-rtl' }) ) // Append \"-rtl\" to the filename.\n\t\t.pipe( rtlcss() ) // Convert to RTL.\n\t\t.pipe( sourcemaps.write( './' ) ) // Output sourcemap for style-rtl.css.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( mmq({ log: true }) ) // Merge Media Queries only for .min.css version.\n\t\t.pipe( rename({ suffix: '.min' }) )\n\t\t.pipe( minifycss({ maxLineLen: 10 }) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> STYLES RTL — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `vendorsJS`.\n *\n * Concatenate and uglify vendor JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS vendor files\n *     2. Concatenates all the files and generates vendors.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates vendors.min.js\n */\ngulp.task( 'vendorsJS', () => {\n\treturn gulp\n\t\t.src( config.jsVendorSRC, { since: gulp.lastRun( 'vendorsJS' ) }) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe(strip())\n\t\t.pipe(\n\t\t\tbabel({\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: { browsers: config.BROWSERS_LIST } // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t})\n\t\t)\n\t\t.pipe( remember( config.jsVendorSRC ) ) // Bring all files back to stream.\n\t\t.pipe( concat( config.jsVendorFile + '.js' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsVendorDestination ) )\n\t\t.pipe(\n\t\t\trename({\n\t\t\t\tbasename: config.jsVendorFile,\n\t\t\t\tsuffix: '.min'\n\t\t\t})\n\t\t)\n\t\t.pipe( uglify() )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsVendorDestination ) )\n\t\t.pipe( browserSync.stream() )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> VENDOR JS — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\ngulp.task( 'customJS', () => {\n\treturn gulp\n\t\t.src( config.jsCustomSRC, { since: gulp.lastRun( 'customJS' ) }) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe(strip())\n\t\t.pipe(\n\t\t\tbabel({\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: { browsers: config.BROWSERS_LIST } // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t})\n\t\t)\n\t\t.pipe( remember( config.jsCustomSRC ) ) // Bring all files back to stream.\n\t\t.pipe( concat( config.jsCustomFile + '.js' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe(\n\t\t\trename({\n\t\t\t\tbasename: config.jsCustomFile,\n\t\t\t\tsuffix: '.min'\n\t\t\t})\n\t\t)\n\t\t.pipe( uglify() )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe( browserSync.stream() )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> CUSTOM JS — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\ngulp.task( 'images', () => {\n\treturn gulp\n\t\t.src( config.imgSRC )\n\t\t.pipe(\n\t\t\tcache(\n\t\t\t\timagemin([\n\t\t\t\t\timagemin.gifsicle({ interlaced: true }),\n\t\t\t\t\timagemin.jpegtran({ progressive: true }),\n\t\t\t\t\timagemin.optipng({ optimizationLevel: 3 }), // 0-7 low-high.\n\t\t\t\t\timagemin.svgo({\n\t\t\t\t\t\tplugins: [ { removeViewBox: true }, { cleanupIDs: false } ]\n\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t)\n\t\t)\n\t\t.pipe( gulp.dest( config.imgDST ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> IMAGES — completed!\\n', onLast: true }) );\n});\n\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\ngulp.task( 'clearCache', function( done ) {\n\treturn cache.clearAll( done );\n});\n\n/**\n * WP POT Translation File Generator.\n *\n * This task does the following:\n * 1. Gets the source of all the PHP files\n * 2. Sort files in stream by path or any custom sort comparator\n * 3. Applies wpPot with the variable set at the top of this file\n * 4. Generate a .pot file of i18n that can be used for l10n to build .mo file\n */\ngulp.task( 'translate', () => {\n\treturn gulp\n\t\t.src( config.watchPhp )\n\t\t.pipe( sort() )\n\t\t.pipe(\n\t\t\twpPot({\n\t\t\t\tdomain: config.textDomain,\n\t\t\t\tpackage: config.packageName,\n\t\t\t\tbugReport: config.bugReport,\n\t\t\t\tlastTranslator: config.lastTranslator,\n\t\t\t\tteam: config.team\n\t\t\t})\n\t\t)\n\t\t.pipe( gulp.dest( config.translationDestination + '/' + config.translationFile ) )\n\t\t.pipe( notify({ message: '\\n\\n✅  ===> TRANSLATE — completed!\\n', onLast: true }) );\n});\n\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\ngulp.task(\n\t'default',\n\tgulp.parallel( 'styles', 'vendorsJS', 'customJS', 'images', browsersync, () => {\n\t\tgulp.watch( config.watchPhp, reload ); // Reload on PHP file changes.\n\t\tgulp.watch( config.watchStyles, gulp.parallel( 'styles' ) ); // Reload on SCSS file changes.\n\t\tgulp.watch( config.watchJsVendor, gulp.series( 'vendorsJS', reload ) ); // Reload on vendorsJS file changes.\n\t\tgulp.watch( config.watchJsCustom, gulp.series( 'customJS', reload ) ); // Reload on customJS file changes.\n\t\tgulp.watch( config.imgSRC, gulp.series( 'images', reload ) ); // Reload on customJS file changes.\n\t})\n);\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1600291673000
  },
  "{\"sourceRoot\":\"/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020\",\"filename\":\"/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/wpgulp.config.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020",
      "filename": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/wpgulp.config.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/wpgulp.config.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/wpgulp.config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/",
        "sourceFileName": "wpgulp.config.js"
      }
    },
    "ast": null,
    "code": "/**\n * WPGulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n * @package WPGulp\n */\nmodule.exports = {\n  // Project options.\n  projectURL: 'localhost:8888',\n  // Local project URL of your already running WordPress site. Could be something like wpgulp.local or localhost:3000 depending upon your local WordPress setup.\n  productURL: './',\n  // Theme/Plugin URL. Leave it like it is, since our gulpfile.js lives in the root folder.\n  browserAutoOpen: false,\n  injectChanges: true,\n  // Style options.\n  styleSRC: './src/sass/style.sass',\n  // Path to main .scss file.\n  styleDestination: './',\n  // Path to place the compiled CSS file. Default set to root folder.\n  outputStyle: 'compact',\n  // Available options → 'compact' or 'compressed' or 'nested' or 'expanded'\n  errLogToConsole: true,\n  precision: 10,\n  // JS Vendor options.\n  jsVendorSRC: './src/js/vendor/*.js',\n  // Path to JS vendor folder.\n  jsVendorDestination: './js/',\n  // Path to place the compiled JS vendors file.\n  jsVendorFile: 'vendor',\n  // Compiled JS vendors file name. Default set to vendors i.e. vendors.js.\n  // JS Custom options.\n  jsCustomSRC: './src/js/bundle/*.js',\n  // Path to JS custom scripts folder.\n  jsCustomDestination: './js/',\n  // Path to place the compiled JS custom scripts file.\n  jsCustomFile: 'bundle',\n  // Compiled JS custom file name. Default set to custom i.e. custom.js.\n  // Images options.\n  imgSRC: './src/images/raw/**/*',\n  // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n  imgDST: './src/images/',\n  // Destination folder of optimized images. Must be different from the imagesSRC folder.\n  // Watch files paths.\n  watchStyles: './src/sass/**/*.sass',\n  // Path to all *.scss files inside css folder and inside them.\n  watchJsVendor: './src/js/vendor/*.js',\n  // Path to all vendor JS files.\n  watchJsCustom: './src/js/bundle/*.js',\n  // Path to all custom JS files.\n  watchPhp: './**/*.php',\n  // Path to all PHP files.\n  // Translation options.\n  textDomain: 'WPGULP',\n  // Your textdomain here.\n  translationFile: 'WPGULP.pot',\n  // Name of the translation file.\n  translationDestination: './languages',\n  // Where to save the translation files.\n  packageName: 'WPGULP',\n  // Package name.\n  bugReport: 'https://AhmadAwais.com/contact/',\n  // Where can users report bugs.\n  lastTranslator: 'Ahmad Awais <your_email@email.com>',\n  // Last translator Email ID.\n  team: 'AhmadAwais <your_email@email.com>',\n  // Team's Email ID.\n  // Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n  // The following list is set as per WordPress requirements. Though, Feel free to change.\n  BROWSERS_LIST: ['last 2 version', '> 1%', 'ie >= 11', 'last 1 Android versions', 'last 1 ChromeAndroid versions', 'last 2 Chrome versions', 'last 2 Firefox versions', 'last 2 Safari versions', 'last 2 iOS versions', 'last 2 Edge versions', 'last 2 Opera versions']\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndwZ3VscC5jb25maWcuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInByb2plY3RVUkwiLCJwcm9kdWN0VVJMIiwiYnJvd3NlckF1dG9PcGVuIiwiaW5qZWN0Q2hhbmdlcyIsInN0eWxlU1JDIiwic3R5bGVEZXN0aW5hdGlvbiIsIm91dHB1dFN0eWxlIiwiZXJyTG9nVG9Db25zb2xlIiwicHJlY2lzaW9uIiwianNWZW5kb3JTUkMiLCJqc1ZlbmRvckRlc3RpbmF0aW9uIiwianNWZW5kb3JGaWxlIiwianNDdXN0b21TUkMiLCJqc0N1c3RvbURlc3RpbmF0aW9uIiwianNDdXN0b21GaWxlIiwiaW1nU1JDIiwiaW1nRFNUIiwid2F0Y2hTdHlsZXMiLCJ3YXRjaEpzVmVuZG9yIiwid2F0Y2hKc0N1c3RvbSIsIndhdGNoUGhwIiwidGV4dERvbWFpbiIsInRyYW5zbGF0aW9uRmlsZSIsInRyYW5zbGF0aW9uRGVzdGluYXRpb24iLCJwYWNrYWdlTmFtZSIsImJ1Z1JlcG9ydCIsImxhc3RUcmFuc2xhdG9yIiwidGVhbSIsIkJST1dTRVJTX0xJU1QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBRWhCO0FBQ0FDLEVBQUFBLFVBQVUsRUFBRSxnQkFISTtBQUdjO0FBQzlCQyxFQUFBQSxVQUFVLEVBQUUsSUFKSTtBQUlFO0FBQ2xCQyxFQUFBQSxlQUFlLEVBQUUsS0FMRDtBQU1oQkMsRUFBQUEsYUFBYSxFQUFFLElBTkM7QUFRaEI7QUFDQUMsRUFBQUEsUUFBUSxFQUFFLHVCQVRNO0FBU21CO0FBQ25DQyxFQUFBQSxnQkFBZ0IsRUFBRSxJQVZGO0FBVVE7QUFDeEJDLEVBQUFBLFdBQVcsRUFBRSxTQVhHO0FBV1E7QUFDeEJDLEVBQUFBLGVBQWUsRUFBRSxJQVpEO0FBYWhCQyxFQUFBQSxTQUFTLEVBQUUsRUFiSztBQWVoQjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUsc0JBaEJHO0FBZ0JxQjtBQUNyQ0MsRUFBQUEsbUJBQW1CLEVBQUUsT0FqQkw7QUFpQmM7QUFDOUJDLEVBQUFBLFlBQVksRUFBRSxRQWxCRTtBQWtCUTtBQUV4QjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUsc0JBckJHO0FBcUJxQjtBQUNyQ0MsRUFBQUEsbUJBQW1CLEVBQUUsT0F0Qkw7QUFzQmM7QUFDOUJDLEVBQUFBLFlBQVksRUFBRSxRQXZCRTtBQXVCUTtBQUV4QjtBQUNBQyxFQUFBQSxNQUFNLEVBQUUsdUJBMUJRO0FBMEJpQjtBQUNqQ0MsRUFBQUEsTUFBTSxFQUFFLGVBM0JRO0FBMkJTO0FBRXpCO0FBQ0FDLEVBQUFBLFdBQVcsRUFBRSxzQkE5Qkc7QUE4QnFCO0FBQ3JDQyxFQUFBQSxhQUFhLEVBQUUsc0JBL0JDO0FBK0J1QjtBQUN2Q0MsRUFBQUEsYUFBYSxFQUFFLHNCQWhDQztBQWdDdUI7QUFDdkNDLEVBQUFBLFFBQVEsRUFBRSxZQWpDTTtBQWlDUTtBQUV4QjtBQUNBQyxFQUFBQSxVQUFVLEVBQUUsUUFwQ0k7QUFvQ007QUFDdEJDLEVBQUFBLGVBQWUsRUFBRSxZQXJDRDtBQXFDZTtBQUMvQkMsRUFBQUEsc0JBQXNCLEVBQUUsYUF0Q1I7QUFzQ3VCO0FBQ3ZDQyxFQUFBQSxXQUFXLEVBQUUsUUF2Q0c7QUF1Q087QUFDdkJDLEVBQUFBLFNBQVMsRUFBRSxpQ0F4Q0s7QUF3QzhCO0FBQzlDQyxFQUFBQSxjQUFjLEVBQUUsb0NBekNBO0FBeUNzQztBQUN0REMsRUFBQUEsSUFBSSxFQUFFLG1DQTFDVTtBQTBDMkI7QUFFM0M7QUFDQTtBQUNBQyxFQUFBQSxhQUFhLEVBQUUsQ0FDZCxnQkFEYyxFQUVkLE1BRmMsRUFHZCxVQUhjLEVBSWQseUJBSmMsRUFLZCwrQkFMYyxFQU1kLHdCQU5jLEVBT2QseUJBUGMsRUFRZCx3QkFSYyxFQVNkLHFCQVRjLEVBVWQsc0JBVmMsRUFXZCx1QkFYYztBQTlDQyxDQUFqQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWxleGlzL0Rldi85M19kZWdyZXNfMjAxOS93cC1jb250ZW50L3RoZW1lcy85M2RlZ3JlczIwMjAvIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXUEd1bHAgQ29uZmlndXJhdGlvbiBGaWxlXG4gKlxuICogMS4gRWRpdCB0aGUgdmFyaWFibGVzIGFzIHBlciB5b3VyIHByb2plY3QgcmVxdWlyZW1lbnRzLlxuICogMi4gSW4gcGF0aHMgeW91IGNhbiBhZGQgPDxnbG9iIG9yIGFycmF5IG9mIGdsb2JzPj4uXG4gKlxuICogQHBhY2thZ2UgV1BHdWxwXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cblx0Ly8gUHJvamVjdCBvcHRpb25zLlxuXHRwcm9qZWN0VVJMOiAnbG9jYWxob3N0Ojg4ODgnLCAvLyBMb2NhbCBwcm9qZWN0IFVSTCBvZiB5b3VyIGFscmVhZHkgcnVubmluZyBXb3JkUHJlc3Mgc2l0ZS4gQ291bGQgYmUgc29tZXRoaW5nIGxpa2Ugd3BndWxwLmxvY2FsIG9yIGxvY2FsaG9zdDozMDAwIGRlcGVuZGluZyB1cG9uIHlvdXIgbG9jYWwgV29yZFByZXNzIHNldHVwLlxuXHRwcm9kdWN0VVJMOiAnLi8nLCAvLyBUaGVtZS9QbHVnaW4gVVJMLiBMZWF2ZSBpdCBsaWtlIGl0IGlzLCBzaW5jZSBvdXIgZ3VscGZpbGUuanMgbGl2ZXMgaW4gdGhlIHJvb3QgZm9sZGVyLlxuXHRicm93c2VyQXV0b09wZW46IGZhbHNlLFxuXHRpbmplY3RDaGFuZ2VzOiB0cnVlLFxuXG5cdC8vIFN0eWxlIG9wdGlvbnMuXG5cdHN0eWxlU1JDOiAnLi9zcmMvc2Fzcy9zdHlsZS5zYXNzJywgLy8gUGF0aCB0byBtYWluIC5zY3NzIGZpbGUuXG5cdHN0eWxlRGVzdGluYXRpb246ICcuLycsIC8vIFBhdGggdG8gcGxhY2UgdGhlIGNvbXBpbGVkIENTUyBmaWxlLiBEZWZhdWx0IHNldCB0byByb290IGZvbGRlci5cblx0b3V0cHV0U3R5bGU6ICdjb21wYWN0JywgLy8gQXZhaWxhYmxlIG9wdGlvbnMg4oaSICdjb21wYWN0JyBvciAnY29tcHJlc3NlZCcgb3IgJ25lc3RlZCcgb3IgJ2V4cGFuZGVkJ1xuXHRlcnJMb2dUb0NvbnNvbGU6IHRydWUsXG5cdHByZWNpc2lvbjogMTAsXG5cblx0Ly8gSlMgVmVuZG9yIG9wdGlvbnMuXG5cdGpzVmVuZG9yU1JDOiAnLi9zcmMvanMvdmVuZG9yLyouanMnLCAvLyBQYXRoIHRvIEpTIHZlbmRvciBmb2xkZXIuXG5cdGpzVmVuZG9yRGVzdGluYXRpb246ICcuL2pzLycsIC8vIFBhdGggdG8gcGxhY2UgdGhlIGNvbXBpbGVkIEpTIHZlbmRvcnMgZmlsZS5cblx0anNWZW5kb3JGaWxlOiAndmVuZG9yJywgLy8gQ29tcGlsZWQgSlMgdmVuZG9ycyBmaWxlIG5hbWUuIERlZmF1bHQgc2V0IHRvIHZlbmRvcnMgaS5lLiB2ZW5kb3JzLmpzLlxuXG5cdC8vIEpTIEN1c3RvbSBvcHRpb25zLlxuXHRqc0N1c3RvbVNSQzogJy4vc3JjL2pzL2J1bmRsZS8qLmpzJywgLy8gUGF0aCB0byBKUyBjdXN0b20gc2NyaXB0cyBmb2xkZXIuXG5cdGpzQ3VzdG9tRGVzdGluYXRpb246ICcuL2pzLycsIC8vIFBhdGggdG8gcGxhY2UgdGhlIGNvbXBpbGVkIEpTIGN1c3RvbSBzY3JpcHRzIGZpbGUuXG5cdGpzQ3VzdG9tRmlsZTogJ2J1bmRsZScsIC8vIENvbXBpbGVkIEpTIGN1c3RvbSBmaWxlIG5hbWUuIERlZmF1bHQgc2V0IHRvIGN1c3RvbSBpLmUuIGN1c3RvbS5qcy5cblxuXHQvLyBJbWFnZXMgb3B0aW9ucy5cblx0aW1nU1JDOiAnLi9zcmMvaW1hZ2VzL3Jhdy8qKi8qJywgLy8gU291cmNlIGZvbGRlciBvZiBpbWFnZXMgd2hpY2ggc2hvdWxkIGJlIG9wdGltaXplZCBhbmQgd2F0Y2hlZC4gWW91IGNhbiBhbHNvIHNwZWNpZnkgdHlwZXMgZS5nLiByYXcvKioue3BuZyxqcGcsZ2lmfSBpbiB0aGUgZ2xvYi5cblx0aW1nRFNUOiAnLi9zcmMvaW1hZ2VzLycsIC8vIERlc3RpbmF0aW9uIGZvbGRlciBvZiBvcHRpbWl6ZWQgaW1hZ2VzLiBNdXN0IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBpbWFnZXNTUkMgZm9sZGVyLlxuXG5cdC8vIFdhdGNoIGZpbGVzIHBhdGhzLlxuXHR3YXRjaFN0eWxlczogJy4vc3JjL3Nhc3MvKiovKi5zYXNzJywgLy8gUGF0aCB0byBhbGwgKi5zY3NzIGZpbGVzIGluc2lkZSBjc3MgZm9sZGVyIGFuZCBpbnNpZGUgdGhlbS5cblx0d2F0Y2hKc1ZlbmRvcjogJy4vc3JjL2pzL3ZlbmRvci8qLmpzJywgLy8gUGF0aCB0byBhbGwgdmVuZG9yIEpTIGZpbGVzLlxuXHR3YXRjaEpzQ3VzdG9tOiAnLi9zcmMvanMvYnVuZGxlLyouanMnLCAvLyBQYXRoIHRvIGFsbCBjdXN0b20gSlMgZmlsZXMuXG5cdHdhdGNoUGhwOiAnLi8qKi8qLnBocCcsIC8vIFBhdGggdG8gYWxsIFBIUCBmaWxlcy5cblxuXHQvLyBUcmFuc2xhdGlvbiBvcHRpb25zLlxuXHR0ZXh0RG9tYWluOiAnV1BHVUxQJywgLy8gWW91ciB0ZXh0ZG9tYWluIGhlcmUuXG5cdHRyYW5zbGF0aW9uRmlsZTogJ1dQR1VMUC5wb3QnLCAvLyBOYW1lIG9mIHRoZSB0cmFuc2xhdGlvbiBmaWxlLlxuXHR0cmFuc2xhdGlvbkRlc3RpbmF0aW9uOiAnLi9sYW5ndWFnZXMnLCAvLyBXaGVyZSB0byBzYXZlIHRoZSB0cmFuc2xhdGlvbiBmaWxlcy5cblx0cGFja2FnZU5hbWU6ICdXUEdVTFAnLCAvLyBQYWNrYWdlIG5hbWUuXG5cdGJ1Z1JlcG9ydDogJ2h0dHBzOi8vQWhtYWRBd2Fpcy5jb20vY29udGFjdC8nLCAvLyBXaGVyZSBjYW4gdXNlcnMgcmVwb3J0IGJ1Z3MuXG5cdGxhc3RUcmFuc2xhdG9yOiAnQWhtYWQgQXdhaXMgPHlvdXJfZW1haWxAZW1haWwuY29tPicsIC8vIExhc3QgdHJhbnNsYXRvciBFbWFpbCBJRC5cblx0dGVhbTogJ0FobWFkQXdhaXMgPHlvdXJfZW1haWxAZW1haWwuY29tPicsIC8vIFRlYW0ncyBFbWFpbCBJRC5cblxuXHQvLyBCcm93c2VycyB5b3UgY2FyZSBhYm91dCBmb3IgYXV0b3ByZWZpeGluZy4gQnJvd3Nlcmxpc3QgaHR0cHM6Ly9naXRodWIuY29tL2FpL2Jyb3dzZXJzbGlzdFxuXHQvLyBUaGUgZm9sbG93aW5nIGxpc3QgaXMgc2V0IGFzIHBlciBXb3JkUHJlc3MgcmVxdWlyZW1lbnRzLiBUaG91Z2gsIEZlZWwgZnJlZSB0byBjaGFuZ2UuXG5cdEJST1dTRVJTX0xJU1Q6IFtcblx0XHQnbGFzdCAyIHZlcnNpb24nLFxuXHRcdCc+IDElJyxcblx0XHQnaWUgPj0gMTEnLFxuXHRcdCdsYXN0IDEgQW5kcm9pZCB2ZXJzaW9ucycsXG5cdFx0J2xhc3QgMSBDaHJvbWVBbmRyb2lkIHZlcnNpb25zJyxcblx0XHQnbGFzdCAyIENocm9tZSB2ZXJzaW9ucycsXG5cdFx0J2xhc3QgMiBGaXJlZm94IHZlcnNpb25zJyxcblx0XHQnbGFzdCAyIFNhZmFyaSB2ZXJzaW9ucycsXG5cdFx0J2xhc3QgMiBpT1MgdmVyc2lvbnMnLFxuXHRcdCdsYXN0IDIgRWRnZSB2ZXJzaW9ucycsXG5cdFx0J2xhc3QgMiBPcGVyYSB2ZXJzaW9ucydcblx0XVxufTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "wpgulp.config.js"
      ],
      "names": [
        "module",
        "exports",
        "projectURL",
        "productURL",
        "browserAutoOpen",
        "injectChanges",
        "styleSRC",
        "styleDestination",
        "outputStyle",
        "errLogToConsole",
        "precision",
        "jsVendorSRC",
        "jsVendorDestination",
        "jsVendorFile",
        "jsCustomSRC",
        "jsCustomDestination",
        "jsCustomFile",
        "imgSRC",
        "imgDST",
        "watchStyles",
        "watchJsVendor",
        "watchJsCustom",
        "watchPhp",
        "textDomain",
        "translationFile",
        "translationDestination",
        "packageName",
        "bugReport",
        "lastTranslator",
        "team",
        "BROWSERS_LIST"
      ],
      "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB;AAEhB;AACAC,EAAAA,UAAU,EAAE,gBAHI;AAGc;AAC9BC,EAAAA,UAAU,EAAE,IAJI;AAIE;AAClBC,EAAAA,eAAe,EAAE,KALD;AAMhBC,EAAAA,aAAa,EAAE,IANC;AAQhB;AACAC,EAAAA,QAAQ,EAAE,uBATM;AASmB;AACnCC,EAAAA,gBAAgB,EAAE,IAVF;AAUQ;AACxBC,EAAAA,WAAW,EAAE,SAXG;AAWQ;AACxBC,EAAAA,eAAe,EAAE,IAZD;AAahBC,EAAAA,SAAS,EAAE,EAbK;AAehB;AACAC,EAAAA,WAAW,EAAE,sBAhBG;AAgBqB;AACrCC,EAAAA,mBAAmB,EAAE,OAjBL;AAiBc;AAC9BC,EAAAA,YAAY,EAAE,QAlBE;AAkBQ;AAExB;AACAC,EAAAA,WAAW,EAAE,sBArBG;AAqBqB;AACrCC,EAAAA,mBAAmB,EAAE,OAtBL;AAsBc;AAC9BC,EAAAA,YAAY,EAAE,QAvBE;AAuBQ;AAExB;AACAC,EAAAA,MAAM,EAAE,uBA1BQ;AA0BiB;AACjCC,EAAAA,MAAM,EAAE,eA3BQ;AA2BS;AAEzB;AACAC,EAAAA,WAAW,EAAE,sBA9BG;AA8BqB;AACrCC,EAAAA,aAAa,EAAE,sBA/BC;AA+BuB;AACvCC,EAAAA,aAAa,EAAE,sBAhCC;AAgCuB;AACvCC,EAAAA,QAAQ,EAAE,YAjCM;AAiCQ;AAExB;AACAC,EAAAA,UAAU,EAAE,QApCI;AAoCM;AACtBC,EAAAA,eAAe,EAAE,YArCD;AAqCe;AAC/BC,EAAAA,sBAAsB,EAAE,aAtCR;AAsCuB;AACvCC,EAAAA,WAAW,EAAE,QAvCG;AAuCO;AACvBC,EAAAA,SAAS,EAAE,iCAxCK;AAwC8B;AAC9CC,EAAAA,cAAc,EAAE,oCAzCA;AAyCsC;AACtDC,EAAAA,IAAI,EAAE,mCA1CU;AA0C2B;AAE3C;AACA;AACAC,EAAAA,aAAa,EAAE,CACd,gBADc,EAEd,MAFc,EAGd,UAHc,EAId,yBAJc,EAKd,+BALc,EAMd,wBANc,EAOd,yBAPc,EAQd,wBARc,EASd,qBATc,EAUd,sBAVc,EAWd,uBAXc;AA9CC,CAAjB",
      "sourceRoot": "/Users/alexis/Dev/93_degres_2019/wp-content/themes/93degres2020/",
      "sourcesContent": [
        "/**\n * WPGulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n * @package WPGulp\n */\n\nmodule.exports = {\n\n\t// Project options.\n\tprojectURL: 'localhost:8888', // Local project URL of your already running WordPress site. Could be something like wpgulp.local or localhost:3000 depending upon your local WordPress setup.\n\tproductURL: './', // Theme/Plugin URL. Leave it like it is, since our gulpfile.js lives in the root folder.\n\tbrowserAutoOpen: false,\n\tinjectChanges: true,\n\n\t// Style options.\n\tstyleSRC: './src/sass/style.sass', // Path to main .scss file.\n\tstyleDestination: './', // Path to place the compiled CSS file. Default set to root folder.\n\toutputStyle: 'compact', // Available options → 'compact' or 'compressed' or 'nested' or 'expanded'\n\terrLogToConsole: true,\n\tprecision: 10,\n\n\t// JS Vendor options.\n\tjsVendorSRC: './src/js/vendor/*.js', // Path to JS vendor folder.\n\tjsVendorDestination: './js/', // Path to place the compiled JS vendors file.\n\tjsVendorFile: 'vendor', // Compiled JS vendors file name. Default set to vendors i.e. vendors.js.\n\n\t// JS Custom options.\n\tjsCustomSRC: './src/js/bundle/*.js', // Path to JS custom scripts folder.\n\tjsCustomDestination: './js/', // Path to place the compiled JS custom scripts file.\n\tjsCustomFile: 'bundle', // Compiled JS custom file name. Default set to custom i.e. custom.js.\n\n\t// Images options.\n\timgSRC: './src/images/raw/**/*', // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n\timgDST: './src/images/', // Destination folder of optimized images. Must be different from the imagesSRC folder.\n\n\t// Watch files paths.\n\twatchStyles: './src/sass/**/*.sass', // Path to all *.scss files inside css folder and inside them.\n\twatchJsVendor: './src/js/vendor/*.js', // Path to all vendor JS files.\n\twatchJsCustom: './src/js/bundle/*.js', // Path to all custom JS files.\n\twatchPhp: './**/*.php', // Path to all PHP files.\n\n\t// Translation options.\n\ttextDomain: 'WPGULP', // Your textdomain here.\n\ttranslationFile: 'WPGULP.pot', // Name of the translation file.\n\ttranslationDestination: './languages', // Where to save the translation files.\n\tpackageName: 'WPGULP', // Package name.\n\tbugReport: 'https://AhmadAwais.com/contact/', // Where can users report bugs.\n\tlastTranslator: 'Ahmad Awais <your_email@email.com>', // Last translator Email ID.\n\tteam: 'AhmadAwais <your_email@email.com>', // Team's Email ID.\n\n\t// Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n\t// The following list is set as per WordPress requirements. Though, Feel free to change.\n\tBROWSERS_LIST: [\n\t\t'last 2 version',\n\t\t'> 1%',\n\t\t'ie >= 11',\n\t\t'last 1 Android versions',\n\t\t'last 1 ChromeAndroid versions',\n\t\t'last 2 Chrome versions',\n\t\t'last 2 Firefox versions',\n\t\t'last 2 Safari versions',\n\t\t'last 2 iOS versions',\n\t\t'last 2 Edge versions',\n\t\t'last 2 Opera versions'\n\t]\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1630154344426
  }
}